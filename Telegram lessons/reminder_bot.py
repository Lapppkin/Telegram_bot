import telebot
from telebot import apihelper
from telebot import types
import time

apihelper.proxy = {'https': 'socks5://user38375:1skmnu@213.32.84.49:13541'}
# apihelper.proxy = {'https':'https://user38375:1skmnu@213.32.84.49:3541'}

bot = telebot.TeleBot('1054775144:AAGR0Pu07k2Ql7VdhleiKL1bl79J6keAEfA')

"""
–ë–æ—Ç-–∑–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å-–ø—Ä–æ–≤–µ—Ä—è—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —É—á–∏—Ç—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (–∏–ª–∏ –¥—Ä—É–≥–∏–µ —à—Ç—É–∫–∏).

–°—É—Ç—å: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å –±–æ—Ç—É —Å–ª–æ–≤–æ (—Ñ—Ä–∞–∑—É), –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –∑–∞–ø–æ–º–Ω–∏—Ç—å. –ü–æ—Ç–æ–º –ø–µ—Ä–µ–≤–æ–¥ (–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ). –ë–æ—Ç –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∏ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–µ–±—è –≤ –±—É–¥—É—â–µ–º. –°–æ–≥–ª–∞—Å–Ω–æ –≥—Ä–∞—Ñ–∏–∫—É –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–ø–æ–∫–∞–∂–µ—Ç –∏ —Å–ª–æ–≤–æ, –∏ –ø–µ—Ä–µ–≤–æ–¥), –∞ –∑–∞—Ç–µ–º (—Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º) –ø—Ä–æ–≤–µ—Ä–∫—É (–ø–æ–∫–∞–∂–µ—Ç —Å–ª–æ–≤–æ –∏ —Å–ø—Ä–æ—Å–∏—Ç –ø–µ—Ä–µ–≤–æ–¥). –ü–æ—Å–ª–µ N —É–¥–∞—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö), –±–æ—Ç –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —ç—Ç–æ —Å–ª–æ–≤–æ.

–ü—Ä–∏–º–µ—Ä:
U: dog
B: –ö–∞–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥? 
U: —Å–æ–±–∞–∫–∞
B: –û–∫–µ–π. –ù–∞–ø–æ–º–Ω—é –ø–æ–∑–∂–µ.
...
B: dog ‚Äî —Å–æ–±–∞–∫–∞
...
B: dog ‚Äî ...
U: –∫–æ—Ç
B: –ù–µ–≤–µ—Ä–Ω–æ.
U: —Å–æ–±–∞–∫–∞
B: –í–µ—Ä–Ω–æ. –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–∑–∂–µ.
...
B: —Å–æ–±–∞–∫–∞ ‚Äî ...
U: god
B: –Ω–µ–≤–µ—Ä–Ω–æ
U: dog
B: –í–µ—Ä–Ω–æ. –ü—Ä–æ–≤–µ—Ä—é –µ—â–µ —Ä–∞–∑–æ–∫ –ø–æ–∑–∂–µ.
...

–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ —É–≥–æ–¥–Ω–æ. –ö–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ —Å–≤–æ–π —Å—Ç–∏–ª—å –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
"""


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∫–æ–º–∞–Ω–¥—ã '/start' or '/help'.
@bot.message_handler(commands=['start', 'help'])
def handle_start_help(message):
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üñê')


# –¢–µ–ø–µ—Ä—å –Ω–∞—É—á–∏–º –±–æ—Ç–∞ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–ª–æ–≤–æ ¬´–ü—Ä–∏–≤–µ—Ç¬ª
@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if str.lower(message.text) == str.lower('–ü—Ä–∏–≤–µ—Ç'):
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name} =)')
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ —Ä–∞–∑–¥–µ–ª, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ ¬´–ü—Ä–∏–≤–µ—Ç¬ª:
        keyboard = types.InlineKeyboardMarkup()

        # –ü–æ –æ—á–µ—Ä–µ–¥–∏ –≥–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ '—ç–ª–µ–º–µ–Ω—Ç–∞'(–∫–Ω–æ–ø–∫–∏)
        key_one = types.InlineKeyboardButton(text='–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞', callback_data='menu_one')


        # –ò –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ —ç–∫—Ä–∞–Ω
        keyboard.add(key_one)


        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —Å—Ä–∞–∑—É –∏ –ø–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ
        bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É', reply_markup=keyboard)
    elif message.text == '/help':
        bot.send_message(message.chat.id, f'–ù–∞–ø–∏—à–∏ - "–ü—Ä–∏–≤–µ—Ç!"')
    else:
        bot.send_message(message.chat.id, f'{message.from_user.first_name}, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é.\n–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É "/help"')



def remind_text(message):
    user_text = message.text
    # bot.send_message(message.chat.id, f'{message.from_user.first_name}, —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –í–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å:\n{user_text}')
    keyboard_rem = types.InlineKeyboardMarkup()

    key_one_rem = types.InlineKeyboardButton(text='30 –º–∏–Ω—É—Ç', callback_data='30_min')
    key_two_rem = types.InlineKeyboardButton(text='60 –º–∏–Ω—É—Ç', callback_data='60_min')
    key_tree_rem = types.InlineKeyboardButton(text='90 –º–∏–Ω—É—Ç', callback_data='90_min')

    # –ò –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ —ç–∫—Ä–∞–Ω
    keyboard_rem.add(key_one_rem)
    keyboard_rem.add(key_two_rem)
    keyboard_rem.add(key_tree_rem)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —Å—Ä–∞–∑—É –∏ –ø–∏—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ
    bot.send_message(message.chat.id, text=f'{message.from_user.first_name}, '
                                           f'—á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –í–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å: \n{user_text}', reply_markup=keyboard_rem)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):

    if call.data == 'menu_one':
        sent = bot.send_message(call.message.chat.id, '–û —á–µ–º –í–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å?')
        bot.register_next_step_handler(sent, remind_text)

        # –ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–º–µ—â–∞–µ–º –≤ —Å—Ç—Ä–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é text
    # elif call.data == 'menu_two':
    elif call.data == '30_min':
        bot.send_message(call.message.chat.id, '–ë—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç =)')
        local_time = float(0.1)
        local_time = local_time * 60
        time.sleep(local_time)
        msg1 = f'–ù–ê–ü–û–ú–ò–ù–ê–Æ' # –ù—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
        bot.send_message(call.message.chat.id, msg1)
    elif call.data == '30_min':
        bot.send_message(call.message.chat.id, '–ë—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç =)')
        local_time = float(0.1)
        local_time = local_time * 60
        time.sleep(local_time)
        msg1 = f'–ù–ê–ü–û–ú–ò–ù–ê–Æ' # call.message.chat.id.text
        bot.send_message(call.message.chat.id, msg1)
    elif call.data == '60_min':
        bot.send_message(call.message.chat.id, '–ë—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ —á–µ—Ä–µ–∑ 60 –º–∏–Ω—É—Ç =)')
        local_time = float(60)
        local_time = local_time * 60
        time.sleep(local_time)
        msg1 = f'–ù–ê–ü–û–ú–ò–ù–ê–Æ'  # call.message.chat.id.text
        bot.send_message(call.message.chat.id, msg1)
    elif call.data == '90_min':
        bot.send_message(call.message.chat.id, '–ë—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ —á–µ—Ä–µ–∑ 90 –º–∏–Ω—É—Ç =)')
        local_time = float(90)
        local_time = local_time * 60
        time.sleep(local_time)
        msg1 = f'–ù–ê–ü–û–ú–ò–ù–ê–Æ'  # call.message.chat.id.text
        bot.send_message(call.message.chat.id, msg1)
    else:
        pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ 2
# @bot.callback_query_handler(func=lambda call: True)
# def callback_worker_rem(call):
#     if call.data == '30_min':
#         bot.send_message(call.chat.id, '–ë—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ =)')
#         # local_time = local_time * 30
#         # time.sleep(local_time)
#         # msg1 = user_text
#         # bot.send_message(call.data.message.chat.id, msg1)
#
#
#
#         # sent = bot.send_message(call.message.chat.id, '–û —á–µ–º –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å?')
#         # bot.register_next_step_handler(sent, remind_text)
#         # –ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–º–µ—â–∞–µ–º –≤ —Å—Ç—Ä–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é text
#
#     elif call.data == '60_min':
#         pass # local_time = local_time * 60
#     elif call.data == '90_min':
#         pass # local_time = local_time * 90
#     else:
#         pass


# @bot.message_handler(content_types=['text'])
# def get_text_remind_messages(message):
#     remind_text = message.text
#     print(remind_text)
#     bot.register_next_step_handler(remind_text)
#
#     bot.send_message(message.chat.id, f'–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å - {remind_text}')


bot.polling(none_stop=True, interval=0)
