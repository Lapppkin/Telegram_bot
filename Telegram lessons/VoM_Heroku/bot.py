# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ —Ñ–∞–π–ª–æ–≤
import telebot
import config
from mintersdk import minterapi
import time
import requests
import json
import base64
import sqlite3
import re
import threading
import datetime
import pytz

database = config.database  # –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

bot_token = config.bot_token  # —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
channgel_name = config.channel  # –∏–º—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞

minter_api = config.minter_api  # api minter
minter_api_headers = config.minter_api_headers  # keys for api minter

address_for_listening = config.address_for_listening  # –∞–¥—Ä–µ—Å –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

bot = telebot.TeleBot(bot_token)  # —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞

hyperlink_format = '<a href="{0}">{1}</a>'  # —à–∞–±–ª–æ–Ω –¥–ª—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏

minterscan_icon_link = config.minterscan_icon_link  # —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –∫–æ—à–µ–ª—å–∫–∞

minterscan_address_link = config.minterscan_address_link  # —Å—Å—ã–ª–∫–∞ –Ω–∞ –∞–¥—Ä–µ—Å

explorer_transaction_link = config.explorer_transaction_link  # —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é

message_template = '{emoji} {from_address}\n\n{payload}\n\n{coin}'  # —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è


# SQL —Ñ—É–Ω–∫—Ü–∏–∏

def insert_into_transactions(hash, from_address, coin, value, payload, status):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ transactions
    :param hash: str
    :param from_address: str
    :param coin: str
    :param value: float
    :param payload: str
    :param status: str
    """
    conn = sqlite3.connect(database)
    cursor = conn.cursor()
    ex = "insert into transactions values ('{}', '{}', '{}',{}, '{}', '{}')".format(hash, from_address, coin, value,
                                                                                    payload, status)
    cursor.execute(ex)
    conn.commit()
    conn.close()


def insert_into_pinned(message_id, time_unpin):
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ pinned
    :param message_id: int
    :param time_unpin: str
    """
    conn = sqlite3.connect(database)
    cursor = conn.cursor()
    ex = "insert into pinned values ({}, '{}')".format(message_id, time_unpin)
    cursor.execute(ex)
    conn.commit()
    conn.close()


def get_unpin(now_time):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º now_time –∏–∑ —Ç–∞–±–ª–∏—Ü—ã pinned
    :param now_time:
    :return: int or bool
    """
    conn = sqlite3.connect(database)
    cursor = conn.cursor()
    ex = "select message_id from pinned where time_unpin = '{}'".format(now_time)
    cursor.execute(ex)
    res = cursor.fetchall()
    conn.commit()
    conn.close()
    return res[0][0] if len(res) else False


def delete_from_pinned():
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã pinned
    """
    conn = sqlite3.connect(database)
    cursor = conn.cursor()
    ex = "delete from pinned"
    cursor.execute(ex)
    conn.commit()
    conn.close()


# –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def check_for_link(text):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Å—ã–ª–∫–∏
    :param text: str
    :return: bool
    """
    regex = r"(?P<domain>\w+\.\w{2,3})"
    r = re.search(regex, text)
    if r or '@' in text:
        return True
    return False


def check_for_delegator(address):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–µ–≥–∞—Ç–æ—Ä–æ–º
    :param address: str
    :return: bool
    """
    data = json.loads(requests.get(config.link_explorer_delegations.format(address)).text)['data']
    for i in data:
        if i['coin'] == config.coin_for_limit and float(i['value']) >= config.limit_delegator_coin:
            return True
    return False


def get_icon(address):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–∫–æ–Ω–∫—É –∫–æ—à–µ–ª—å–∫–∞. –ü—Ä–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –∏–∫–æ–Ω–∫—É.
    :param address: str
    :return: str
    """
    try:
        icon = requests.get(minterscan_icon_link.format(address)).text
        return icon
    except:
        return 'ü§î'


def now_time():
    """
    –ü—Ä–∏–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–µ–∑ —Å–µ–∫—É–Ω–¥ (–ú–°–ö) –∫ —Å—Ç—Ä–æ—á–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É (YYYY-MM-DDTHH:MM+03:00)
    :return: str
    """
    tzlocal = pytz.timezone('Europe/Moscow')
    now = datetime.datetime.now(tzlocal)
    s = ''
    s += str(now.year) + '-'
    if len(str(now.month)) > 1:
        s += str(now.month)
    else:
        s += '0' + str(now.month)
    s += '-'
    if len(str(now.day)) > 1:
        s += str(now.day)
    else:
        s += '0' + str(now.day)
    s += 'T'
    if len(str(now.hour)) > 1:
        s += str(now.hour)
    else:
        s += '0' + str(now.hour)
    s += ':'
    if len(str(now.minute)) > 1:
        s += str(now.minute)
    else:
        s += '0' + str(now.minute)
    return s


def time_delta(period):
    """
    –í—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –±–µ–∑ —Å–µ–∫—É–Ω–¥ (–ú–°–ö) –≤ —Å—Ç—Ä–æ—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (YYYY-MM-DDTHH:MM+03:00)
    :param period: str (hour or day)
    :return: str
    """
    tzlocal = pytz.timezone('Europe/Moscow')
    now = datetime.datetime.now(tzlocal)

    if period == 'hour':
        delta_time = now + datetime.timedelta(hours=1)
    elif period == 'day':
        delta_time = now + datetime.timedelta(days=1)
    s = ''
    s += str(delta_time.year) + '-'
    if len(str(delta_time.month)) > 1:
        s += str(delta_time.month)
    else:
        s += '0' + str(delta_time.month)
    s += '-'
    if len(str(delta_time.day)) > 1:
        s += str(delta_time.day)
    else:
        s += '0' + str(delta_time.day)
    s += 'T'
    if len(str(delta_time.hour)) > 1:
        s += str(delta_time.hour)
    else:
        s += '0' + str(delta_time.hour)
    s += ':'
    if len(str(delta_time.minute)) > 1:
        s += str(delta_time.minute)
    else:
        s += '0' + str(delta_time.minute)
    return s


def pin_message(period, message_info):
    """
    –ó–∞–∫—Ä–µ–ø–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏–≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ.
    :param period: str
    :param message_info: message
    """
    delete_from_pinned()
    bot.pin_chat_message(channgel_name, message_info.message_id)
    insert_into_pinned(message_info.message_id, time_delta(period))


def unpinner():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞, –æ—Ç–∫—Ä–µ–ø–ª—è—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –≤—Ä–µ–º—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è.
    """
    while True:
        if get_unpin(now_time()):
            bot.unpin_chat_message(channgel_name)
            delete_from_pinned()
        time.sleep(60)


unpinner_thread = threading.Thread(target=unpinner,
                                   name='unpinner_thread')  # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
unpinner_thread.start()  # –∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞

'''
# –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –¥–ª—è funfasy.dev
class MinterAPIService(minterapi.MinterAPI):
    request_headers = minter_api_headers

    def _request(self, command, request_type='get', **kwargs):
        kwargs['headers'] = self.request_headers
        aa = super()._request(command, request_type=request_type, **kwargs)
        if 'result' in aa.keys():
            return aa['result']
        else:
            return aa
'''

MinterNode = minterapi.MinterAPI(api_url=minter_api, headers=minter_api_headers)  # –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å minter api

# –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –∫–æ—à–µ–ª–µ–∫
# –∑–Ω–∞—á–µ–Ω–∏–µ page –ø—Ä–µ–¥–µ–ª—å–Ω–æ –±–æ–ª—å—à–æ–µ –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–≥–æ, —á—Ç–æ –Ω—É–∂–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
txns = MinterNode.get_transactions(query="tags.tx.to='{}'".format(address_for_listening), page=100000000000)['result']
while True:
    # –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    txns2 = MinterNode.get_transactions(query="tags.tx.to='{}'".format(address_for_listening), page=100000000000)['result']
    print('–í–°–ï –û–ö, –†–ê–ë–û–¢–ê–Æ - ', txns2)
    # –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º
    for i in txns2:
        if i not in txns:
            icon = get_icon(i['from'])  # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏
            from_address = i['from']  # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            from_address_short = from_address[:6] + '...' + from_address[
                                                            -4:]  # –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∫ —Ñ–æ—Ä–º–∞—Ç—É MxAAAA...AAAA
            payload = base64.b64decode(i['payload']).decode(
                'utf-8')  # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ payload –∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –µ–≥–æ –∫ utf-8
            coin = i['data']['coin']  # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
            value = float("{0:.3f}".format(int(i['data']['value']) / 10 ** 18))  # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º—ã
            value_coin = str(value) + ' ' + coin  # —Å–æ–≤–º–µ—â–µ–Ω–∏–µ —Å—É–º–º—ã –∏ –º–æ–Ω–µ—Ç—ã
            value_coin = hyperlink_format.format(explorer_transaction_link.format(i['hash'].lower()),
                                                 value_coin)  # —Å–æ–∑–¥–∞–Ω–∏–µ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            from_address = hyperlink_format.format(minterscan_address_link.format(from_address),
                                                   from_address_short)  # —Å–æ–∑–¥–∞–Ω–∏–µ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            message_text = message_template.format(emoji=icon, from_address=from_address, payload=payload,
                                                   coin=value_coin)  # —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (—Å—É–º–º–∞, –º–æ–Ω–µ—Ç–∞, –Ω–µ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            if value >= config.price_for_ordinary_message and coin == config.coin_for_limit and payload:
                # –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–ª–µ–≥–∞—Ç–æ—Ä—Å—Ç–≤–∞
                if check_for_delegator(i['from']):
                    price_for_linked_messages = config.price_for_delegator_message
                else:
                    price_for_linked_messages = config.price_for_linked_messages

                message_info = ''
                # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –∏ —Å—É–º–º–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
                if check_for_link(payload) and value >= price_for_linked_messages:
                    message_info = bot.send_message(channgel_name, message_text, parse_mode='HTML',
                                                    disable_web_page_preview=True)  # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    insert_into_transactions('Mt' + i['hash'], i['from'], coin, value, payload,
                                             'PUBLISHED')  # –≤—Å—Ç–∞–≤–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É transactions —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º PUBLISHED
                # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –∏ —Å—É–º–º–∞ –ù–ï —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É–µ—Ç
                elif check_for_link(payload) and value < price_for_linked_messages:
                    insert_into_transactions('Mt' + i['hash'], i['from'], coin, value, payload,
                                             'NOT PUBLISHED')  # –≤—Å—Ç–∞–≤–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É transactions —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º NOT PUBLISHED
                # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å—Å—ã–ª–∫–∏ –∏ —Å—É–º–º–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
                elif not check_for_link(payload) and value >= price_for_linked_messages:
                    message_info = bot.send_message(channgel_name, message_text, parse_mode='HTML',
                                                    disable_web_page_preview=True)  # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    insert_into_transactions('Mt' + i['hash'], i['from'], coin, value, payload,
                                             'PUBLISHED')  # –≤—Å—Ç–∞–≤–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É transactions —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º PUBLISHED
                # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å—Å—ã–ª–∫–∏ –∏ —Å—É–º–º–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
                elif not check_for_link(
                        payload) and price_for_linked_messages > value >= config.price_for_ordinary_message:
                    message_info = bot.send_message(channgel_name, message_text, parse_mode='HTML',
                                                    disable_web_page_preview=True)  # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    insert_into_transactions('Mt' + i['hash'], i['from'], coin, value, payload,
                                             'PUBLISHED')  # –≤—Å—Ç–∞–≤–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É transactions —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º PUBLISHED

                # –µ—Å–ª–∏ —Å—É–º–º–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—É–º–º–µ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –Ω–∞ —á–∞—Å, –Ω–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—É–º–º–µ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –Ω–∞ –¥–µ–Ω—å
                if config.price_for_pin_hour <= value < config.price_for_pin_day:
                    pin_message('hour', message_info)
                # –µ—Å–ª–∏ —Å—É–º–º–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç —Å—É–º–º–µ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –Ω–∞ –¥–µ–Ω—å
                elif value >= config.price_for_pin_day:
                    pin_message('day', message_info)
            else:
                insert_into_transactions('Mt' + i['hash'], i['from'], coin, value, payload,
                                         'NOT PUBLISHED')  # –≤—Å—Ç–∞–≤–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É transactions —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º NOT PUBLISHED

    txns = txns2  # —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –Ω–æ–≤—ã–µ
    time.sleep(2)  # –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã
