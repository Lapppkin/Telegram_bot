from telegram import Bot
from telegram import Update
from telegram import KeyboardButton
from telegram import ReplyKeyboardMarkup
from telegram import ReplyKeyboardRemove
from telegram import InlineKeyboardButton
from telegram import InlineKeyboardMarkup
from telegram import ReplyKeyboardRemove
from telegram.ext import CallbackContext
from telegram.ext import CommandHandler
from telegram.ext import Updater
from telegram import ParseMode
from telegram.ext import Filters
from telegram.ext import MessageHandler
from telegram.ext import CallbackQueryHandler
from telegram.utils.request import Request


import logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)


# `callback_data` -- —ç—Ç–æ —Ç–æ, —á—Ç–æ –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å TG –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É.
# –ü–æ—ç—Ç–æ–º—É –∫–∞–∂–¥—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
CALLBACK_BUTTON_LEFT = 'callback_button_left'
CALLBACK_BUTTON_RIGHT = 'callback_button_right'
CALLBACK_BUTTON_BACK = 'callback_button_back'

TITLES = {
    CALLBACK_BUTTON_LEFT: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
    CALLBACK_BUTTON_RIGHT: '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
    CALLBACK_BUTTON_BACK: '–ù–∞–∑–∞–¥',
}

button_1 = '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'
BUTTON1_HELP = "–ü–æ–º–æ—â—å"


def log_error(f):

    def inner(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞: {e}')
            raise e

    return inner

def get_base_reply_keyboard():
    keyboard = [
        [
            KeyboardButton(BUTTON1_HELP),
        ],
    ]
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
    )


def get_base_inline_keyboard():
    """ –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        –≠—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –ø–æ–¥ –∫–∞–∂–¥—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –≥–¥–µ –µ—ë –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏
    """
    # –ö–∞–∂–¥—ã–π —Å–ø–∏—Å–æ–∫ –≤–Ω—É—Ç—Ä–∏ `keyboard` -- —ç—Ç–æ –æ–¥–∏–Ω –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    keyboard = [
        # –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ —Å–ø–∏—Å–∫–∞ -- —ç—Ç–æ –æ–¥–∏–Ω –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü.
        # –°–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ -- —Å—Ç–æ–ª—å–∫–æ —Å—Ç–æ–ª–±—Ü–æ–≤
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON_LEFT], callback_data=CALLBACK_BUTTON_LEFT),
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON_RIGHT], callback_data=CALLBACK_BUTTON_RIGHT),
        ],
        [
            InlineKeyboardButton(TITLES[CALLBACK_BUTTON_BACK], callback_data=CALLBACK_BUTTON_BACK),
        ],

    ]
    return InlineKeyboardMarkup(keyboard)


def keyboard_callback_handler(update: Update, context: CallbackContext):
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –í–°–ï–• –∫–Ω–æ–ø–æ–∫ —Å–æ –í–°–ï–• –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    """
    query = update.callback_query
    data = query.data

    # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è `effective_message`
    chat_id = update.effective_message.chat_id
    current_text = update.effective_message.text

    if data == CALLBACK_BUTTON_LEFT:
        # "–£–¥–∞–ª–∏–º" –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        # (–Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ —Ç–∞–∫, —á—Ç–æ —Ç–µ–∫—Å—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–æ—Ç –∂–µ, –∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–ø–∞–¥—ë—Ç)
        query.edit_message_text(
            text='–ù–∞–ø–∏—à–∏—Ç–µ –æ —á–µ–º –í–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å?',
            parse_mode=ParseMode.MARKDOWN,
        )

    # –û—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
    #     context.bot.send_message(
    #         chat_id=chat_id,
    #         text=f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n{update.callback_query}',
    #         reply_markup=get_base_inline_keyboard(),
    #    )
    # elif data == CALLBACK_BUTTON2_RIGHT:
    #     # –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    #     query.edit_message_text(
    #         text="–£—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ {}".format(now),
    #         reply_markup=get_base_inline_keyboard(),
    #     )
    # elif data == CALLBACK_BUTTON3_MORE:
    #     # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    #     # (–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç, –Ω–æ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫)
    #     query.edit_message_text(
    #         text=current_text,
    #         reply_markup=get_keyboard2(),
    #     )
    # elif data == CALLBACK_BUTTON4_BACK:
    #     # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    #     # (–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç, –Ω–æ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫)
    #     query.edit_message_text(
    #         text=current_text,
    #         reply_markup=get_base_inline_keyboard(),
    #     )
    # elif data == CALLBACK_BUTTON5_TIME:
    #     # –ü–æ–∫–∞–∂–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –æ—Å—Ç–∞–≤–∏–º —Ç—É –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    #     text = "*–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è*\n\n{}".format(now)
    #     query.edit_message_text(
    #         text=text,
    #         parse_mode=ParseMode.MARKDOWN,
    #         reply_markup=get_keyboard2(),
    #     )
    # elif data in (CALLBACK_BUTTON6_PRICE, CALLBACK_BUTTON7_PRICE, CALLBACK_BUTTON8_PRICE):
    #     pair = {
    #         CALLBACK_BUTTON6_PRICE: "USD-BTC",
    #         CALLBACK_BUTTON7_PRICE: "USD-LTC",
    #         CALLBACK_BUTTON8_PRICE: "USD-ETH",
    #     }[data]

    #     try:
    #         current_price = client.get_last_price(pair=pair)
    #         text = "*–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã:*\n\n*{}* = {}$".format(pair, current_price)
    #     except BittrexError:
    #         text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ :(\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑"
    #     query.edit_message_text(
    #         text=text,
    #         parse_mode=ParseMode.MARKDOWN,
    #         reply_markup=get_keyboard2(),
    #     )
    elif data == CALLBACK_BUTTON_BACK:
        # –°–ø—Ä—è—Ç–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        # –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –ú–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –Ω–æ —Ç–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —Ç–æ—á–Ω–æ –∑–Ω–∞—Ç—å —á—Ç–æ —É —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ –∫–Ω–æ–ø–æ–∫
        context.bot.send_message(
            chat_id=chat_id,
            text="–í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –Ω–∞—á–∞–ª—É\n\n–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞",
            reply_markup=ReplyKeyboardRemove(),
        )


def do_start(update: Update, context: CallbackContext):
    user_name = update.message.from_user.first_name
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f'–ü—Ä–∏–≤–µ—Ç, {user_name}! üññ',
        reply_markup=get_base_reply_keyboard()
        )


def do_help(update: Update, context: CallbackContext):
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f'–ù–∞–ø–∏—à–∏ - "–ü—Ä–∏–≤–µ—Ç" üññ'
        )


def do_echo(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    text = update.message.text

    if text == BUTTON1_HELP:
        return do_help(update=update, context=context)

    elif text == str('–ü—Ä–∏–≤–µ—Ç') or str('–ø—Ä–∏–≤–µ—Ç'):
        # user_text = update.message.text
        update.message.reply_text(
            # text=user_text,
            text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç: ',
            reply_markup=get_base_inline_keyboard(),
        )
    elif text == f'–Ω–∞–ø–æ–º–Ω–∏ {text}':
        # –û—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
        context.bot.send_message(
            chat_id=chat_id,
            text=f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n{update.message.text}',
            )

    # elif text == BUTTON2_TIME:
    #     pass
    else:
        return do_help(update=update, context=context)
        # # user_text = update.message.text
        # update.message.reply_text(
        #     # text=user_text,
        #     text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç: ',
        #     reply_markup=get_base_inline_keyboard(),
        # )

    # context.bot.send_message(
    #     chat_id=update.effective_chat.id,
    #     text=f'–í—ã –≤–≤–µ–ª–∏ - {user_text}'
    #     )
    # return user_text


# def do_button_1_handler(update: Update, context: CallbackContext):
#     update.message.reply_text(
#         text='–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!',
#         reply_markup=ReplyKeyboardRemove(),
#     )


# def do_message_handler(update: Update, context: CallbackContext):
#     text = update.message.text
#     if text == button_1:
#         return button_1_handler(update=update, context=context)

#     reply_markup = ReplyKeyboardMarkup(
#         keyboard=[
#             [
#                 KeyboardButton(text=button_1),
#             ],
#         ],
#         resize_keyboard=True,
#     )

#     update.message.reply_text(
#         text='–ü—Ä–∏–≤–µ—Ç, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!',
#         reply_markup=reply_markup,
#     )


# @log_error
# def message_handler(update: Update, context: CallbackContext):
#     text = update.message.text
#     if text == button_help:
#         return button_help_handler(update=update, context=context)

#     reply_markup = ReplyKeyboardMarkup(
#         keyboard=[
#             [
#                 KeyboardButton(text=button_help),
#             ],
#         ],
#         resize_keyboard=True,
#     )

#     update.message.reply_text(
#         text='–ü—Ä–∏–≤–µ—Ç, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!',
#         reply_markup=reply_markup,
#     )


def main():
    print('Start')

    req = Request(
        connect_timeout=0.5,
    )
    bot = Bot(
        request=req,
        token='1054775144:AAGR0Pu07k2Ql7VdhleiKL1bl79J6keAEfA',
        # base_url='https://telegg.ru/orig/bot',
    )
    updater = Updater(
        bot=bot,
        use_context=True,
    )
    print(updater.bot.get_me())

    start_handler = CommandHandler('start', do_start)
    help_handler = CommandHandler('help', do_help)
    message_handler = MessageHandler(Filters.text, do_echo)
    # button_message_handler = MessageHandler(Filters.text, do_message_handler)
    # button_1_handler = MessageHandler(Filters.text, do_button_1_handler)
    buttons_handler = CallbackQueryHandler(callback=keyboard_callback_handler)

    updater.dispatcher.add_handler(start_handler)
    updater.dispatcher.add_handler(help_handler)
    updater.dispatcher.add_handler(message_handler)
    # updater.dispatcher.add_handler(button_message_handler)
    # updater.dispatcher.add_handler(button_1_handler)
    updater.dispatcher.add_handler(MessageHandler(filters=Filters.all, callback=message_handler))
    updater.dispatcher.add_handler(buttons_handler)

    updater.start_polling()
    updater.idle()

    print('Finish')


if __name__ == '__main__':
    main()